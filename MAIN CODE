import tkinter as tk
from tkinter import scrolledtext
import json
import datetime
import random
import re
import os

# Memory
def load_memory():
    default_memory = {
        "name": None,
        "preferences": {},
        "schedule": [],
        "facts": {},
        "chat_history": []
    }
    try:
        with open("memory.json", "r") as f:
            loaded = json.load(f)
            for key, value in default_memory.items():
                if key not in loaded:
                    loaded[key] = value
            return loaded
    except FileNotFoundError:
        return default_memory

def save_memory(memory):
    with open("memory.json", "w") as f:
        json.dump(memory, f, indent=4)

memory = load_memory()

# Brain
def get_response(user_input):
    user_input = user_input.lower()
    now = datetime.datetime.now()
    hour = now.hour

    def get_greeting():
        if hour < 12:
            return "Good morning "
        elif hour < 17:
            return "Good afternoon "
        else:
            return "Good evening "

    def random_reply(options):
        return random.choice(options)

    # Save user message and bot response
    def record_history(user, bot):
        memory["chat_history"].append({"user": user, "bot": bot})
        save_memory(memory)

    # Learn New Facts 
    if "remember that" in user_input:
        match = re.match(r"remember that (.+?) is (.+)", user_input)
        if match:
            key = match.group(1).strip()
            value = match.group(2).strip()
            memory["facts"][key] = value
            save_memory(memory)
            response = f"Got it! I'll remember that {key} is {value}."
            record_history(user_input, response)
            return response

    if "what is" in user_input:
        key = user_input.replace("what is", "").strip(" ?")
        if key in memory["facts"]:
            response = f"You told me that {key} is {memory['facts'][key]}."
            record_history(user_input, response)
            return response

    # Name Memory
    name_match = re.search(r"my name is (.+)", user_input)
    if name_match:
        name = name_match.group(1).strip().capitalize()
        memory["name"] = name
        save_memory(memory)
        response = f"Nice to meet you, {name}!"
        record_history(user_input, response)
        return response

    if "what's my name" in user_input or "what is my name" in user_input:
        response = f"Your name is {memory['name']}" if memory["name"] else "I don't know your name yet!"
        record_history(user_input, response)
        return response

    # Time & Date 
    if "time" in user_input:
        response = f"It's {now.strftime('%I:%M %p')} now. "
        record_history(user_input, response)
        return response

    if "date" in user_input or "day" in user_input:
        response = f"Today is {now.strftime('%A, %B %d, %Y')} "
        record_history(user_input, response)
        return response

    # Greeting 
    if any(greet in user_input for greet in ["hello", "hi", "hey", "yo", "what's up"]):
        response = f"{get_greeting()}, {memory['name'] if memory['name'] else 'friend'}! How can I assist you today? "
        record_history(user_input, response)
        return response

    # Emotion & Mood
    if "i am sad" in user_input or "feeling down" in user_input:
        response = random_reply([
            "I'm here for you . Want to talk about it?",
            "Dark clouds pass. You're stronger than you think ",
            "Hugs from your digital buddy "
        ])
        record_history(user_input, response)
        return response

    if "i am happy" in user_input:
        response = "That's fantastic! Keep smiling . You light up the code!"
        record_history(user_input, response)
        return response

    if "i am tired" in user_input:
        response = "You deserve rest . Drink water and recharge yourself!"
        record_history(user_input, response)
        return response

    # Preferences
    like_match = re.search(r"i like (.+)", user_input)
    if like_match:
        item = like_match.group(1).strip()
        memory["preferences"]["like"] = item
        save_memory(memory)
        response = f"Awesome! I'll remember that you like {item} ️"
        record_history(user_input, response)
        return response

    if "what do i like" in user_input:
        like = memory["preferences"].get("like")
        response = f"You like {like}." if like else "I don't know yet! Tell me by saying 'I like...'."
        record_history(user_input, response)
        return response

    # Schedule Handling
    if "remember" in user_input and "schedule" in user_input:
        task_match = re.search(r"schedule (.+)", user_input)
        if task_match:
            task = task_match.group(1).strip()
            day = now.strftime("%A")
            memory["schedule"].append({"day": day, "task": task})
            save_memory(memory)
            response = f"Got it! I've added '{task}' to your {day} schedule."
            record_history(user_input, response)
            return response

    if "what's my schedule" in user_input or "what is my schedule" in user_input:
        today = now.strftime("%A")
        tasks = [t["task"] for t in memory["schedule"] if t["day"] == today]
        response = "Today's schedule:\n- " + "\n- ".join(tasks) if tasks else "You have nothing scheduled today! "
        record_history(user_input, response)
        return response

    # Jokes & Fun
    if "joke" in user_input:
        response = random_reply([
            "Why did the robot go to school? Because it had a lot of byte-sized knowledge! ",
            "I told my computer I needed a break, and it said 'No problem, I’ll go to sleep!' ",
            "What’s a robot’s favorite snack? Microchips! "
        ])
        record_history(user_input, response)
        return response

    if "motivate" in user_input or "inspire" in user_input:
        response = random_reply([
            "Believe in yourself. Even your code can compile eventually! ",
            "Great things take time — just like long projects ",
            "You're more capable than you think. Keep going "
        ])
        record_history(user_input, response)
        return response

    if "compliment me" in user_input:
        response = random_reply([
            "You're intelligent and creative ",
            "You're doing amazing, seriously! ",
            "You’re one of my favorite humans "
        ])
        record_history(user_input, response)
        return response

    # Smart Fallbacks
    question_patterns = [
        r"who (.*)", r"what (.*)", r"when (.*)", r"where (.*)", r"why (.*)", r"how (.*)"
    ]
    for pattern in question_patterns:
        if re.match(pattern, user_input):
            response = "That's a great question! I'm still learning general knowledge, but you can teach me if you'd like."
            record_history(user_input, response)
            return response

    if len(user_input.split()) == 1:
        response = random_reply([
            "That's a strong word! Want to tell me more?",
            "Interesting... I’d love context ",
            "That’s deep. Could you expand on that?"
        ])
        record_history(user_input, response)
        return response

    # Default Fallback
    response = random_reply([
        "Hmm, I didn’t quite get that. Want to rephrase? ",
        "I'm still learning — help me grow by trying different words!",
        "That went over my circuits! Let's try a different angle. "
    ])
    record_history(user_input, response)
    return response


# GUI
def send_message():
    user_input = entry.get()
    if user_input:
        chatbox.insert(tk.END, f"You: {user_input}\n")
        response = get_response(user_input)
        chatbox.insert(tk.END, f"NeoBuddy: {response}\n\n")
        entry.delete(0, tk.END)

# Window 
root = tk.Tk()
root.title("NeoBuddy – Responsive Personal Assistant")
root.geometry("550x500")
root.resizable(False, False)

chatbox = scrolledtext.ScrolledText(root, wrap=tk.WORD, font=("Arial", 12))
chatbox.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)

entry = tk.Entry(root, font=("Arial", 14))
entry.pack(padx=10, pady=5, fill=tk.X)
entry.bind("<Return>", lambda event: send_message())

send_button = tk.Button(root, text="Send", command=send_message, font=("Arial", 12), bg="#007ACC", fg="white")
send_button.pack(pady=5)

root.mainloop()
